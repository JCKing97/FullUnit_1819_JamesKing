/** <module> This file tests any strategies related to image scoring
 * @author James King
 */

?- ['../percepts'].
?- ['../communities'].
?- ['../agents'].
?- ['../revise'].
?- ['../strategies'].
?- ['../beliefs'].
?- ['../actions'].

?-['../mvfcec/src/lib/utilities'].
?-['../mvfcec/src/compiler/basic_V1.0'].
?-['../mvfcec/src/lib/activity_recognition_lifecycles'].
:- dynamic observed_at/2.
dialect(swi).
:- dynamic player_id/1.

get_new_player_id(NewID):-
	current_predicate(player_id/1),
	player_id(ID), !,
	retract(player_id(ID)),
	NewID is ID+1,
	assert(player_id(NewID)).
get_new_player_id(ID):-
	assert(player_id(0)),
	ID is 0.

check_correct_action_timepoints([Timepoint], CommunityID, GenerationID, AgentID, Action):-
	assertion(agent_action(Timepoint, CommunityID, GenerationID, AgentID, Success, Action)),
	assertion(get_action(Timepoint, CommunityID, GenerationID, AgentID, Success, Action)).
check_correct_action_timepoints([Timepoint|OtherTimepoints], CommunityID, GenerationID, AgentID, Action):-
	assertion(agent_action(Timepoint, CommunityID, GenerationID, AgentID, Success, Action)),
	assertion(get_action(Timepoint, CommunityID, GenerationID, AgentID, Success, Action)),
	check_correct_action_timepoints(OtherTimepoints, CommunityID, GenerationID, AgentID, Action).


:- begin_tests(discriminator).

	test(image_score_beliefs_all_for_actions):-
		new_community(ID),
		new_generation(data{community: ID, generation: 0}, true),
		get_new_player_id(CoopID),
		new_agent(data{donor_strategy: "Cooperator", non_donor_strategy: "Lazy", trust_model: "Void", options: [], community: ID, generation: 0, player: CoopID}, true),
		get_new_player_id(DefectID),
		new_agent(data{donor_strategy: "Defector", non_donor_strategy: "Lazy", trust_model: "Void", options: [], community: ID, generation: 0, player: DefectID}, true),
		forall(strategy("Image Scoring Discriminator", NonDonorStrategy, TrustModel, _, Options),
			(
				get_new_player_id(PlayerID),
				new_agent(data{donor_strategy: "Image Scoring Discriminator", non_donor_strategy: NonDonorStrategy, trust_model: TrustModel, options: Options, community: ID, generation: 0, player: PlayerID}, true),
				% Decrease every time a defection is seen
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 1, action: "defect"}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, DefectID))= -1, 2)),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 2, action: "defect"}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, DefectID))= -2, 3)),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 3, action: "defect"}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, DefectID))= -3, 4)),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 4, action: "defect"}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, DefectID))= -4, 5)),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 5, action: "defect"}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, DefectID))= -5, 6)),
				% Bound to -5
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 6, action: "defect"}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, DefectID))= -5, 7)),
				% Increase image score by 1 every time cooperation observed
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 7, action: "cooperate"}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, DefectID))= -4, 8)),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: CoopID, recipient: DefectID, timepoint: 7, action: "cooperate"}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, CoopID))=1, 8)),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: CoopID, recipient: DefectID, timepoint: 8, action: "cooperate"}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, CoopID))=2, 9)),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: CoopID, recipient: DefectID, timepoint: 9, action: "cooperate"}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, CoopID))=3, 10)),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: CoopID, recipient: DefectID, timepoint: 10, action: "cooperate"}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, CoopID))=4, 11)),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: CoopID, recipient: DefectID, timepoint: 11, action: "cooperate"}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, CoopID))=5, 12)),
				% Bound to 5
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: CoopID, recipient: DefectID, timepoint: 12, action: "cooperate"}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, CoopID))=5, 13)),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, DefectID))= -4, 13))
		    )
		).

	test(image_score_beliefs_for_gossip_trusting):-
		new_community(ID),
		new_generation(data{community: ID, generation: 0}, true),
		get_new_player_id(CoopID),
		new_agent(data{donor_strategy: "Cooperator", non_donor_strategy: "Lazy", trust_model: "Void", options: [], community: ID, generation: 0, player: CoopID}, true),
		get_new_player_id(DefectID),
		new_agent(data{donor_strategy: "Defector", non_donor_strategy: "Lazy", trust_model: "Void", options: [], community: ID, generation: 0, player: DefectID}, true),
		get_new_player_id(OtherID),
		new_agent(data{donor_strategy: "Defector", non_donor_strategy: "Lazy", trust_model: "Void", options: [], community: ID, generation: 0, player: OtherID}, true),
		forall(strategy("Image Scoring Discriminator", NonDonorStrategy, "Trusting", _, [0|OtherOptions]),
			(
				get_new_player_id(PlayerID),
				new_agent(data{donor_strategy: "Image Scoring Discriminator", non_donor_strategy: NonDonorStrategy, trust_model: "Trusting", options: [0|OtherOptions], community: ID, generation: 0, player: PlayerID}, true),
				% Decrease every time negative gossip is given about a player
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: DefectID, gossiper: CoopID, gossip: "negative", timepoint: 1}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, DefectID))= -1, 2)),
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: DefectID, gossiper: CoopID, gossip: "negative", timepoint: 2}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, DefectID))= -2, 3)),
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: DefectID, gossiper: CoopID, gossip: "negative", timepoint: 3}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, DefectID))= -3, 4)),
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: DefectID, gossiper: CoopID, gossip: "negative", timepoint: 4}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, DefectID))= -4, 5)),
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: DefectID, gossiper: CoopID, gossip: "negative", timepoint: 5}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, DefectID))= -5, 6)),
				% Bound by -5
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: DefectID, gossiper: CoopID, gossip: "negative", timepoint: 6}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, DefectID))= -5, 7)),
				% Increase image score by 1 everytime positive gossip is seen
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: DefectID, gossiper: CoopID, gossip: "positive", timepoint: 7}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, DefectID))= -4, 8)),
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: CoopID, gossiper: DefectID, gossip: "positive", timepoint: 8}, true),
				assertion(\+holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, CoopID))=1, 9)),
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: CoopID, gossiper: OtherID, gossip: "positive", timepoint: 8}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, CoopID))=1, 9)),
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: CoopID, gossiper: DefectID, gossip: "positive", timepoint: 9}, true),
				assertion(\+holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, CoopID))=2, 10)),
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: CoopID, gossiper: OtherID, gossip: "positive", timepoint: 9}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, CoopID))=2, 10)),
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: CoopID, gossiper: DefectID, gossip: "positive", timepoint: 10}, true),
				assertion(\+holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, CoopID))=3, 11)),
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: CoopID, gossiper: OtherID, gossip: "positive", timepoint: 10}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, CoopID))=3, 11)),
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: CoopID, gossiper: DefectID, gossip: "positive", timepoint: 11}, true),
				assertion(\+holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, CoopID))=4, 12)),
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: CoopID, gossiper: OtherID, gossip: "positive", timepoint: 11}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, CoopID))=4, 12)),
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: CoopID, gossiper: DefectID, gossip: "positive", timepoint: 12}, true),
				assertion(\+holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, CoopID))=5, 13)),
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: CoopID, gossiper: OtherID, gossip: "positive", timepoint: 12}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, CoopID))=5, 13)),
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: CoopID, gossiper: DefectID, gossip: "positive", timepoint: 13}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, CoopID))=5, 14)),
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: CoopID, gossiper: OtherID, gossip: "positive", timepoint: 13}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, CoopID))=5, 14)),
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: DefectID, gossiper: CoopID, gossip: "positive", timepoint: 14}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, DefectID))= -3, 15)),
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: CoopID, gossiper: DefectID, gossip: "negative", timepoint: 15}, true),
				assertion(\+holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, CoopID))=4, 16)),
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: CoopID, gossiper: OtherID, gossip: "negative", timepoint: 15}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, CoopID))=4, 16))
			)
		).

	test(image_score_naive_trusting):-
		forall(strategy("Image Scoring Discriminator", NonDonorStrategy, "Naive Trusting", _, Options),
			(
				new_community(ID),
				new_generation(data{community: ID, generation: 0}, true),
				get_new_player_id(CoopID),
				new_agent(data{donor_strategy: "Cooperator", non_donor_strategy: "Lazy", trust_model: "Void", options: [], community: ID, generation: 0, player: CoopID}, true),
				get_new_player_id(DefectID),
				new_agent(data{donor_strategy: "Defector", non_donor_strategy: "Lazy", trust_model: "Void", options: [], community: ID, generation: 0, player: DefectID}, true),
				get_new_player_id(PlayerID),
				new_agent(data{donor_strategy: "Image Scoring Discriminator", non_donor_strategy: NonDonorStrategy, trust_model: "Naive Trusting", options: Options, community: ID, generation: 0, player: PlayerID}, true),
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: DefectID, gossiper: CoopID, gossip: "negative", timepoint: 1}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, DefectID))= -1, 2)),
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: DefectID, gossiper: CoopID, gossip: "negative", timepoint: 2}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, DefectID))= -2, 3)),
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: DefectID, gossiper: CoopID, gossip: "positive", timepoint: 3}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, DefectID))= -1, 4)),
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: CoopID, gossiper: DefectID, gossip: "positive", timepoint: 4}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, CoopID))=1, 5))
			)
		).

	test(image_score_beliefs_for_gossip_distrusting):-
		new_community(ID),
		new_generation(data{community: ID, generation: 0}, true),
		get_new_player_id(CoopID),
		new_agent(data{donor_strategy: "Cooperator", non_donor_strategy: "Lazy", trust_model: "Void", options: [], community: ID, generation: 0, player: CoopID}, true),
		get_new_player_id(DefectID),
		new_agent(data{donor_strategy: "Defector", non_donor_strategy: "Lazy", trust_model: "Void", options: [], community: ID, generation: 0, player: DefectID}, true),
		forall(strategy("Image Scoring Discriminator", NonDonorStrategy, "Distrusting", _, Options),
			(
				get_new_player_id(PlayerID),
				new_agent(data{donor_strategy: "Image Scoring Discriminator", non_donor_strategy: NonDonorStrategy, trust_model: "Distrusting", options: Options, community: ID, generation: 0, player: PlayerID}, true),
				% Do not allow the changing of any image score based on gossip
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: DefectID, gossiper: CoopID, gossip: "negative", timepoint: 1}, true),
				assertion(\+holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, DefectID))= -1, 2)),
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: DefectID, gossiper: CoopID, gossip: "negative", timepoint: 2}, true),
				assertion(\+holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, DefectID))= -2, 3)),
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: DefectID, gossiper: CoopID, gossip: "positive", timepoint: 3}, true),
				assertion(\+holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, DefectID))= -1, 4)),
				add_new_action_gossip_percept(data{community: ID, generation: 0, perceiver: PlayerID,
					about: CoopID, gossiper: DefectID, gossip: "positive", timepoint: 4}, true),
				assertion(\+holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, CoopID))=1, 5))
			)
		).

	test(image_score_interaction_actions_K0):-
		new_community(ID),
		new_generation(data{community: ID, generation: 0}, true),
		get_new_player_id(CoopID),
		new_agent(data{donor_strategy: "Cooperator", non_donor_strategy: "Lazy", trust_model: "Void", options: [], community: ID, generation: 0, player: CoopID}, true),
		get_new_player_id(DefectID),
		new_agent(data{donor_strategy: "Defector", non_donor_strategy: "Lazy", trust_model: "Void", options: [], community: ID, generation: 0, player: DefectID}, true),
		forall(strategy("Image Scoring Discriminator", NonDonorStrategy, TrustModel, _, [0|OtherOptions]),
			(
				get_new_player_id(PlayerID),
				new_agent(data{donor_strategy: "Image Scoring Discriminator", non_donor_strategy: NonDonorStrategy, trust_model: TrustModel, options: [0|OtherOptions], community: ID, generation: 0, player: PlayerID}, true),
				% Cooperates as presumes image score is 0
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 0}, true)),
				assertion(agent_action(0, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: DefectID, reason: "I am cooperating as I do not know the recipient's image, but I think should give them a chance"})),
		     	assertion(get_action(0, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: DefectID, reason: "I am cooperating as I do not know the recipient's image, but I think should give them a chance"})),
		     	assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: CoopID, timepoint: 1}, true)),
				assertion(agent_action(1, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I do not know the recipient's image, but I think should give them a chance"})),
		     	assertion(get_action(1, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I do not know the recipient's image, but I think should give them a chance"})),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 1}, true)),
				% Decrease image score by 1 each time, as these will be less than 0 defect
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 1, action: "defect"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 2}, true)),
				assertion(agent_action(2, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(2, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 2, action: "defect"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 3}, true)),
				assertion(agent_action(3, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(3, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 3, action: "defect"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 4}, true)),
				assertion(agent_action(4, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(4, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 4, action: "defect"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 5}, true)),
				assertion(agent_action(5, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(5, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 5, action: "defect"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 6}, true)),
				assertion(agent_action(6, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(6, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
				% Bound to -5
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 6, action: "defect"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 7}, true)),
				assertion(agent_action(7, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(7, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),				
		     	% Increase image score by 1 every time cooperation observed, as greater than 0 cooperate
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 7, action: "cooperate"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 8}, true)),
				assertion(agent_action(8, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(8, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
		     	assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: CoopID, timepoint: 9}, true)),
		     	assertion(agent_action(9, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I do not know the recipient's image, but I think should give them a chance"})),
		     	assertion(get_action(9, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I do not know the recipient's image, but I think should give them a chance"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: CoopID, recipient: DefectID, timepoint: 9, action: "cooperate"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: CoopID, timepoint: 10}, true)),
				assertion(agent_action(10, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(10, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: CoopID, recipient: DefectID, timepoint: 10, action: "cooperate"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: CoopID, timepoint: 11}, true)),
				assertion(agent_action(11, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(11, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: CoopID, recipient: DefectID, timepoint: 11, action: "cooperate"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: CoopID, timepoint: 12}, true)),
				assertion(agent_action(12, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(12, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: CoopID, recipient: DefectID, timepoint: 12, action: "cooperate"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: CoopID, timepoint: 13}, true)),
				assertion(agent_action(13, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(13, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: CoopID, recipient: DefectID, timepoint: 13, action: "cooperate"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: CoopID, timepoint: 14}, true)),
				assertion(agent_action(14, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(14, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
				% Bound to 5
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: CoopID, recipient: DefectID, timepoint: 14, action: "cooperate"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: CoopID, timepoint: 15}, true)),
				assertion(agent_action(15, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(15, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
		     	assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 16}, true)),
		     	assertion(agent_action(16, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(16, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"}))
		    )
		).

	test(image_score_interaction_actions_K2):-
		new_community(ID),
		new_generation(data{community: ID, generation: 0}, true),
		get_new_player_id(CoopID),
		new_agent(data{donor_strategy: "Cooperator", non_donor_strategy: "Lazy", trust_model: "Void", options: [], community: ID, generation: 0, player: CoopID}, true),
		get_new_player_id(DefectID),
		new_agent(data{donor_strategy: "Defector", non_donor_strategy: "Lazy", trust_model: "Void", options: [], community: ID, generation: 0, player: DefectID}, true),
		forall(strategy("Image Scoring Discriminator", NonDonorStrategy, TrustModel, _, [2|OtherOptions]),
			(
				get_new_player_id(PlayerID),
				new_agent(data{donor_strategy: "Image Scoring Discriminator", non_donor_strategy: NonDonorStrategy, trust_model: TrustModel, options: [2|OtherOptions], community: ID, generation: 0, player: PlayerID}, true),
				% Defect as presumes image score is 0 (less than 2)
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 0}, true)),
				assertion(agent_action(0, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not know of the recipient's image so I cannot trust them"})),
		     	assertion(get_action(0, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not know of the recipient's image so I cannot trust them"})),
		     	assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: CoopID, timepoint: 1}, true)),
				assertion(agent_action(1, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: CoopID, reason: "I am defecting as I do not know of the recipient's image so I cannot trust them"})),
		     	assertion(get_action(1, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: CoopID, reason: "I am defecting as I do not know of the recipient's image so I cannot trust them"})),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 1}, true)),
				% Decrease every time a defection is seen, less than 2 therefore defect
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 1, action: "defect"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 2}, true)),
				assertion(agent_action(2, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(2, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 2, action: "defect"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 3}, true)),
				assertion(agent_action(3, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(3, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 3, action: "defect"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 4}, true)),
				assertion(agent_action(4, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(4, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 4, action: "defect"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 5}, true)),
				assertion(agent_action(5, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(5, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 5, action: "defect"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 6}, true)),
				assertion(agent_action(6, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(6, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
				% Bound to -5
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 6, action: "defect"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 7}, true)),
				assertion(agent_action(7, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(7, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),				
		     	% Increase image score by 1 every time cooperation observed, defect until greather than 2
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 7, action: "cooperate"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 8}, true)),
				assertion(agent_action(8, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(8, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
		     	assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: CoopID, timepoint: 9}, true)),
		     	assertion(agent_action(9, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: CoopID, reason: "I am defecting as I do not know of the recipient's image so I cannot trust them"})),
		     	assertion(get_action(9, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: CoopID, reason: "I am defecting as I do not know of the recipient's image so I cannot trust them"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: CoopID, recipient: DefectID, timepoint: 9, action: "cooperate"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: CoopID, timepoint: 10}, true)),
				assertion(agent_action(10, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: CoopID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(10, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: CoopID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: CoopID, recipient: DefectID, timepoint: 10, action: "cooperate"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: CoopID, timepoint: 11}, true)),
				assertion(agent_action(11, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(11, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: CoopID, recipient: DefectID, timepoint: 11, action: "cooperate"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: CoopID, timepoint: 12}, true)),
				assertion(agent_action(12, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(12, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: CoopID, recipient: DefectID, timepoint: 12, action: "cooperate"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: CoopID, timepoint: 13}, true)),
				assertion(agent_action(13, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(13, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: CoopID, recipient: DefectID, timepoint: 13, action: "cooperate"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: CoopID, timepoint: 14}, true)),
				assertion(agent_action(14, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(14, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
				% Bound to 5
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: CoopID, recipient: DefectID, timepoint: 14, action: "cooperate"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: CoopID, timepoint: 15}, true)),
				assertion(agent_action(15, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(15, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
		     	assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 16}, true)),
		     	assertion(agent_action(16, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(16, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"}))
		    )
		).

	test(image_score_interaction_actions_K_2):-
		new_community(ID),
		new_generation(data{community: ID, generation: 0}, true),
		get_new_player_id(CoopID),
		new_agent(data{donor_strategy: "Cooperator", non_donor_strategy: "Lazy", trust_model: "Void", options: [], community: ID, generation: 0, player: CoopID}, true),
		get_new_player_id(DefectID),
		new_agent(data{donor_strategy: "Defector", non_donor_strategy: "Lazy", trust_model: "Void", options: [], community: ID, generation: 0, player: DefectID}, true),
		forall(strategy("Image Scoring Discriminator", NonDonorStrategy, TrustModel, _, [-2|OtherOptions]),
			(
				get_new_player_id(PlayerID),
				new_agent(data{donor_strategy: "Image Scoring Discriminator", non_donor_strategy: NonDonorStrategy, trust_model: TrustModel, options: [-2|OtherOptions], community: ID, generation: 0, player: PlayerID}, true),
				% Cooperate as presumes image score is 0 (greather than -2)
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 0}, true)),
				assertion(agent_action(0, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: DefectID, reason: "I am cooperating as I do not know the recipient's image, but I think should give them a chance"})),
		     	assertion(get_action(0, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: DefectID, reason: "I am cooperating as I do not know the recipient's image, but I think should give them a chance"})),
		     	assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: CoopID, timepoint: 1}, true)),
				assertion(agent_action(1, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I do not know the recipient's image, but I think should give them a chance"})),
		     	assertion(get_action(1, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I do not know the recipient's image, but I think should give them a chance"})),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 1}, true)),
				% Decrease every time a defection is seen, cooperate until less than -2
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 1, action: "defect"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 2}, true)),
				assertion(agent_action(2, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: DefectID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(2, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: DefectID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 2, action: "defect"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 3}, true)),
				assertion(agent_action(3, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: DefectID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(3, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: DefectID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 3, action: "defect"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 4}, true)),
				assertion(agent_action(4, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(4, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 4, action: "defect"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 5}, true)),
				assertion(agent_action(5, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(5, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 5, action: "defect"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 6}, true)),
				assertion(agent_action(6, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(6, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
				% Bound to -5
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 6, action: "defect"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 7}, true)),
				assertion(agent_action(7, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(7, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),				
		     	% Increase image score by 1 every time cooperation observed, cooperate as greater than -2
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 7, action: "cooperate"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 8}, true)),
				assertion(agent_action(8, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(8, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
		     	assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: CoopID, timepoint: 9}, true)),
		     	assertion(agent_action(9, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I do not know the recipient's image, but I think should give them a chance"})),
		     	assertion(get_action(9, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I do not know the recipient's image, but I think should give them a chance"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: CoopID, recipient: DefectID, timepoint: 9, action: "cooperate"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: CoopID, timepoint: 10}, true)),
				assertion(agent_action(10, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(10, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: CoopID, recipient: DefectID, timepoint: 10, action: "cooperate"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: CoopID, timepoint: 11}, true)),
				assertion(agent_action(11, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(11, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: CoopID, recipient: DefectID, timepoint: 11, action: "cooperate"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: CoopID, timepoint: 12}, true)),
				assertion(agent_action(12, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(12, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: CoopID, recipient: DefectID, timepoint: 12, action: "cooperate"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: CoopID, timepoint: 13}, true)),
				assertion(agent_action(13, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(13, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: CoopID, recipient: DefectID, timepoint: 13, action: "cooperate"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: CoopID, timepoint: 14}, true)),
				assertion(agent_action(14, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(14, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
				% Bound to 5
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: CoopID, recipient: DefectID, timepoint: 14, action: "cooperate"}, true),
				assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: CoopID, timepoint: 15}, true)),
				assertion(agent_action(15, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(15, ID, 0, PlayerID, true, action{type:action, value:cooperate, recipient: CoopID, reason: "I am cooperating as I believe the recipient's image is worthy of cooperation"})),
		     	assertion(add_new_interaction_percept(data{community: ID, generation: 0, donor: PlayerID, recipient: DefectID, timepoint: 16}, true)),
		     	assertion(agent_action(16, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"})),
		     	assertion(get_action(16, ID, 0, PlayerID, true, action{type:action, value:defect, recipient: DefectID, reason: "I am defecting as I do not believe the recipient's image is worthy of cooperation"}))
		    )
		).

	test(image_score_lazy_actions):-
		new_community(ID),
		new_generation(data{community: ID, generation: 0}, true),
		forall(strategy("Image Scoring Discriminator", "Lazy", TrustModel, _, Options),
			(
				get_new_player_id(PlayerID),
				new_agent(data{donor_strategy: "Image Scoring Discriminator", non_donor_strategy: "Lazy", trust_model: TrustModel, options: Options, community: ID, generation: 0, player: PlayerID}, true),
				assertion(agent_action(1, ID, 0, PlayerID, true, action{type:idle, reason: "I only act when I have to"})),
		     	assertion(get_action(1, ID, 0, PlayerID, true, action{type:idle, reason: "I only act when I have to"})),
		     	assertion(agent_action(2, ID, 0, PlayerID, true, action{type:idle, reason: "I only act when I have to"})),
		     	assertion(get_action(2, ID, 0, PlayerID, true, action{type:idle, reason: "I only act when I have to"})),
		     	assertion(agent_action(3, ID, 0, PlayerID, true, action{type:idle, reason: "I only act when I have to"})),
		     	assertion(get_action(3, ID, 0, PlayerID, true, action{type:idle, reason: "I only act when I have to"}))
			)
		).

	test(image_score_promote_self_action):-
		forall(strategy("Image Scoring Discriminator", "Promote Self", TrustModel, _, Options),
			(
				new_community(ID),
				new_generation(data{community: ID, generation: 0}, true),
				get_new_player_id(CoopID),
				new_agent(data{donor_strategy: "Cooperator", non_donor_strategy: "Lazy", trust_model: "Void", options: [], community: ID, generation: 0, player: CoopID}, true),
				get_new_player_id(PlayerID),
				new_agent(data{donor_strategy: "Image Scoring Discriminator", non_donor_strategy: "Promote Self", trust_model: TrustModel, options: Options, community: ID, generation: 0, player: PlayerID}, true),
				%assertion(agent_action(1, ID, 0, PlayerID, true, action{type:gossip, value:positive, about: PlayerID, recipient:CoopID})),
		     	%assertion(get_action(1, ID, 0, PlayerID, true, action{type:gossip, value:positive, about: PlayerID, recipient:CoopID})),
		     	%assertion(agent_action(2, ID, 0, PlayerID, true, action{type:gossip, value:positive, about: PlayerID, recipient:CoopID})),
		     	%assertion(get_action(2, ID, 0, PlayerID, true, action{type:gossip, value:positive, about: PlayerID, recipient:CoopID})),
		     	assertion(agent_action(3, ID, 0, PlayerID, true, action{type:gossip, value:positive, about: PlayerID, recipient:CoopID, reason: "I promote myself because I want to encourage others to cooperate with me"})),
		     	assertion(get_action(3, ID, 0, PlayerID, true, action{type:gossip, value:positive, about: PlayerID, recipient:CoopID, reason: "I promote myself because I want to encourage others to cooperate with me"}))
			)
		).

	test(image_score_spread_accurate_positive):-
		forall(strategy("Image Scoring Discriminator", "Spread Accurate Positive", TrustModel, _, [1]),
			(
				new_community(ID),
				new_generation(data{community: ID, generation: 0}, true),
				get_new_player_id(CoopID),
				new_agent(data{donor_strategy: "Cooperator", non_donor_strategy: "Lazy", trust_model: "Void", options: [], community: ID, generation: 0, player: CoopID}, true),
				get_new_player_id(DefectID),
				new_agent(data{donor_strategy: "Defector", non_donor_strategy: "Lazy", trust_model: "Void", options: [], community: ID, generation: 0, player: DefectID}, true),
				get_new_player_id(PlayerID),
				new_agent(data{donor_strategy: "Image Scoring Discriminator", non_donor_strategy: "Spread Accurate Positive", trust_model: TrustModel, options: [1], community: ID, generation: 0, player: PlayerID}, true),
				assertion(agent_action(1, ID, 0, PlayerID, true, action{type:idle, reason: "I know no two good agents to be the recipient and the target of positive gossip"})),
		     	assertion(get_action(1, ID, 0, PlayerID, true, action{type:idle, reason: "I know no two good agents to be the recipient and the target of positive gossip"})),
		     	add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: CoopID, recipient: DefectID, timepoint: 1, action: "cooperate"}, true),
		     	assertion(agent_action(2, ID, 0, PlayerID, true, action{type:idle, reason: "I know no two good agents to be the recipient and the target of positive gossip"})),
		     	assertion(get_action(2, ID, 0, PlayerID, true, action{type:idle, reason: "I know no two good agents to be the recipient and the target of positive gossip"})),
		     	add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 2, action: "cooperate"}, true),
		     	assertion(agent_action(3, ID, 0, PlayerID, true, action{type:gossip, value:positive, about: AboutID, recipient:RecipID,
					reason: "I believe the agent this gossip is about is good and want to spread that belief to other agents I believe are good"})),
				assertion(((RecipID is CoopID, AboutID is DefectID) ; (RecipID is DefectID, AboutID is CoopID))),
		     	assertion(get_action(3, ID, 0, PlayerID, true, action{type:gossip, value:positive, about: AboutID1, recipient:RecipID1,
					reason: "I believe the agent this gossip is about is good and want to spread that belief to other agents I believe are good"})),
		     	assertion(((RecipID1 is CoopID, AboutID1 is DefectID) ; (RecipID1 is DefectID, AboutID1 is CoopID))),
		     	assertion(agent_action(4, ID, 0, PlayerID, true, action{type:gossip, value:positive, about: AboutID2, recipient:RecipID2,
					reason: "I believe the agent this gossip is about is good and want to spread that belief to other agents I believe are good"})),
				assertion(((RecipID2 is CoopID, AboutID2 is DefectID) ; (RecipID2 is DefectID, AboutID2 is CoopID))),
		     	assertion(get_action(4, ID, 0, PlayerID, true, action{type:gossip, value:positive, about: AboutID3, recipient:RecipID3,
					reason: "I believe the agent this gossip is about is good and want to spread that belief to other agents I believe are good"})),
		     	assertion(((RecipID3 is CoopID, AboutID3 is DefectID) ; (RecipID3 is DefectID, AboutID3 is CoopID))),
		     	assertion(agent_action(5, ID, 0, PlayerID, true, action{type:gossip, value:positive, about: AboutID4, recipient:RecipID4,
					reason: "I believe the agent this gossip is about is good and want to spread that belief to other agents I believe are good"})),
				assertion(((RecipID4 is CoopID, AboutID4 is DefectID) ; (RecipID4 is DefectID, AboutID4 is CoopID))),
		     	assertion(get_action(5, ID, 0, PlayerID, true, action{type:gossip, value:positive, about: AboutID5, recipient:RecipID5,
					reason: "I believe the agent this gossip is about is good and want to spread that belief to other agents I believe are good"})),
		     	assertion(((RecipID5 is CoopID, AboutID5 is DefectID) ; (RecipID5 is DefectID, AboutID5 is CoopID))),
		     	add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 5, action: "defect"}, true),
		     	assertion(agent_action(6, ID, 0, PlayerID, true, action{type:idle, reason: "I know no two good agents to be the recipient and the target of positive gossip"})),
		     	assertion(get_action(6, ID, 0, PlayerID, true, action{type:idle, reason: "I know no two good agents to be the recipient and the target of positive gossip"}))
			)
		).

	test(image_score_spread_accurate_negative):-
		forall(strategy("Image Scoring Discriminator", "Spread Accurate Negative", TrustModel, _, [1]),
			(
				new_community(ID),
				new_generation(data{community: ID, generation: 0}, true),
				get_new_player_id(CoopID),
				new_agent(data{donor_strategy: "Cooperator", non_donor_strategy: "Lazy", trust_model: "Void", options: [], community: ID, generation: 0, player: CoopID}, true),
				get_new_player_id(DefectID),
				new_agent(data{donor_strategy: "Defector", non_donor_strategy: "Lazy", trust_model: "Void", options: [], community: ID, generation: 0, player: DefectID}, true),
				get_new_player_id(ThirdID),
				new_agent(data{donor_strategy: "Cooperator", non_donor_strategy: "Lazy", trust_model: "Void", options: [], community: ID, generation: 0, player: ThirdID}, true),
				get_new_player_id(FourthID),
				new_agent(data{donor_strategy: "Cooperator", non_donor_strategy: "Lazy", trust_model: "Void", options: [], community: ID, generation: 0, player: FourthID}, true),
				get_new_player_id(PlayerID),
				new_agent(data{donor_strategy: "Image Scoring Discriminator", non_donor_strategy: "Spread Accurate Negative", trust_model: TrustModel, options: [1], community: ID, generation: 0, player: PlayerID}, true),
				assertion(agent_action(1, ID, 0, PlayerID, true, action{type:idle, reason: "I know of no agents with good standing to warn of the agents with bad standing"})),
		     	assertion(get_action(1, ID, 0, PlayerID, true, action{type:idle, reason: "I know of no agents with good standing to warn of the agents with bad standing"})),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: CoopID, recipient: DefectID, timepoint: 1, action: "cooperate"}, true),
				assertion(agent_action(2, ID, 0, PlayerID, true, action{type:gossip, value:negative, about: AboutID, recipient:CoopID,
 					reason: "I believe the agent the gossip is about to have a bad image, I am warning those I believe are good"})),
				assertion((AboutID is DefectID;AboutID is ThirdID;AboutID is FourthID)),
		     	assertion(get_action(2, ID, 0, PlayerID, true, action{type:gossip, value:negative, about: AboutID1, recipient:CoopID,
 					reason: "I believe the agent the gossip is about to have a bad image, I am warning those I believe are good"})),
		     	assertion((AboutID1 is DefectID;AboutID1 is ThirdID;AboutID1 is FourthID)),
		     	assertion(agent_action(3, ID, 0, PlayerID, true, action{type:gossip, value:negative, about: AboutID2, recipient:CoopID,
 					reason: "I believe the agent the gossip is about to have a bad image, I am warning those I believe are good"})),
		     	assertion((AboutID2 is DefectID;AboutID2 is ThirdID;AboutID2 is FourthID)),
		     	assertion(get_action(3, ID, 0, PlayerID, true, action{type:gossip, value:negative, about: AboutID3, recipient:CoopID,
 					reason: "I believe the agent the gossip is about to have a bad image, I am warning those I believe are good"})),
		     	assertion((AboutID3 is DefectID;AboutID3 is ThirdID;AboutID3 is FourthID)),
		     	assertion(agent_action(4, ID, 0, PlayerID, true, action{type:gossip, value:negative, about: AboutID4, recipient:CoopID,
 					reason: "I believe the agent the gossip is about to have a bad image, I am warning those I believe are good"})),
		     	assertion((AboutID4 is DefectID;AboutID4 is ThirdID;AboutID4 is FourthID)),
		     	assertion(get_action(4, ID, 0, PlayerID, true, action{type:gossip, value:negative, about: AboutID5, recipient:CoopID,
 					reason: "I believe the agent the gossip is about to have a bad image, I am warning those I believe are good"})),
		     	assertion((AboutID5 is DefectID;AboutID5 is ThirdID;AboutID5 is FourthID)),
		     	add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 5, action: "cooperate"}, true),
		     	add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: ThirdID, recipient: CoopID, timepoint: 5, action: "cooperate"}, true),
		     	add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: FourthID, recipient: CoopID, timepoint: 5, action: "cooperate"}, true),
		     	assertion(agent_action(6, ID, 0, PlayerID, true, action{type:idle, reason: "I know of no agents with bad standing to warn others about"})),
		     	assertion(get_action(6, ID, 0, PlayerID, true, action{type:idle, reason: "I know of no agents with bad standing to warn others about"})),
		     	add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 7, action: "defect"}, true),
		     	assertion(agent_action(8, ID, 0, PlayerID, true, action{type:gossip, value:negative, about: DefectID, recipient:RecipID,
 					reason: "I believe the agent the gossip is about to have a bad image, I am warning those I believe are good"})),
		     	assertion((RecipID is CoopID;RecipID is ThirdID;RecipID is FourthID)),
		     	assertion(get_action(8, ID, 0, PlayerID, true, action{type:gossip, value:negative, about: DefectID, recipient:RecipID1,
 					reason: "I believe the agent the gossip is about to have a bad image, I am warning those I believe are good"})),
		     	assertion((RecipID1 is CoopID;RecipID1 is ThirdID;RecipID1 is FourthID))
			)
		).



:- end_tests(discriminator).

:- begin_tests(personal_grievance).


	test(image_score_personal_grievance):-
		forall(strategy("Image Scoring Discriminator", NonDonorStrategy, TrustModel, _, [K,"Personal Grievance"]),
			(
				new_community(ID),
				new_generation(data{community: ID, generation: 0}, true),
				get_new_player_id(CoopID),
				new_agent(data{donor_strategy: "Cooperator", non_donor_strategy: "Lazy", trust_model: "Void", options: [], community: ID, generation: 0, player: CoopID}, true),
				get_new_player_id(DefectID),
				new_agent(data{donor_strategy: "Defector", non_donor_strategy: "Lazy", trust_model: "Void", options: [], community: ID, generation: 0, player: DefectID}, true),
				get_new_player_id(PlayerID),
				new_agent(data{donor_strategy: "Image Scoring Discriminator", non_donor_strategy: NonDonorStrategy, trust_model: TrustModel, options: [K,"Personal Grievance"], community: ID, generation: 0, player: PlayerID}, true),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 0, action: "defect"}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, DefectID))= -1, 1)),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: PlayerID, timepoint: 2, action: "defect"}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, DefectID))= -3, 3)),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: PlayerID, timepoint: 4, action: "cooperate"}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, DefectID))= -1, 5)),
				add_new_action_interaction_percept(data{community: ID, generation: 0,
					perceiver: PlayerID, donor: DefectID, recipient: CoopID, timepoint: 6, action: "cooperate"}, true),
				assertion(holds_at(image_score(agent(_, community(ID), _, PlayerID), agent(_, community(ID), _, DefectID))= 0, 7))
			)
		).

:- end_tests(personal_grievance).
