#%RAML 1.0
---
title: Agent Mind as a Service
baseUri: http://localhost:8080/api/
version: 0.1
description: Welcome to the documentation for the agent mind as a service API, the service hosts agents minds for a game-theoretic model that uses mixed indirect and direct reciprocity mechanisms. These agents have their own memory of events (input as percepts) which the agent then uses to form beliefs about their world upon which they can act.

/strategy:
  description: The strategies an agent can be.
  get:
    description: Retrieve a JSON object containing names, descriptions and options of the strategies an agent can be. The strategies listed here aren't an exhaustive list.
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "success": true,
                "status" : 200,
                "strategies": [
                  {
                    "description": "Cooperates every time, does not bother to actively gossip",
                    "donor_strategy": "Cooperator",
                    "non_donor_strategy": "Lazy",
                    "trust_model": "Void",
                    "options": []
                  },
                  {
                    "description": "Cooperates every time, actively gossips and promotes positive information about self",
                    "donor_strategy": "Cooperator",
                    "non_donor_strategy": "Promote Self",
                    "trust_model": "Void",
                    "options": []
                  },
                  {
                    "description": "Defects every time, does not bother to actively gossip",
                    "donor_strategy": "Defector",
                    "non_donor_strategy": "Lazy",
                    "trust_model": "Void",
                    "options": []
                  },
                  {
                    "description": "Defects every time, actively gossips and promotes positive information about self",
                    "donor_strategy": "Defector",
                    "non_donor_strategy": "Promote Self",
                    "trust_model": "Void",
                    "options": []
                  },
                  {
                   "description": "Considers every other agent to start on a good standing, if they observe a defection towards an agent with good standing the donor that defected is given a bad standing. Cooperates with agents they deem to have good standing, defects against those with bad standing. Trusts gossip from agents with a good standing, actively promotes positive image of good agents",
                   "donor_strategy": "Standing Discriminator",
                   "non_donor_strategy": "Spread Accurate Positive",
                   "trust_model": "Trusting",
                   "options": [
                     "trusting"
                    ]
                  },
                  {
                    "description": "Considers every other agent to start on a good standing, if they observe a defection towards an agent with good standing the donor that defected is given a bad standing. Cooperates with agents they deem to have good standing, defects against those with bad standing. Doesn't trust other agents gossip, actively promotes own image with gossip",
                    "donor_strategy": "Standing Discriminator",
                    "non_donor_strategy": "Promote Self",
                    "trust_model": "Distrusting",
                    "options": []
                  },
                  {
                    "description": "Holds a value for each player starting on 0, when interacting if the agent holds a value of greater than or equal to K=1 for the recipient they cooperate, else they defect. Agent spreads negative gossip about those it distrusts (value < K) and trusts other trusted agents gossip. Cooperation and defection against an agent using this strategy have a doubly large effect on the donors image score.",
                    "donor_strategy": "Image Scoring Discriminator",
                    "non_donor_strategy": "Spread Negative Accurate",
                    "trust_model": "Trusting",
                    "options": [1, "Personal Grievance"]
                  },
                  {
                    "description": "Holds a veritability rating v for each other agent which is affected by percepts when that agent is a donor or gossip about that agent (+20*weight when viewing a cooperation, -20*weight when viewing a defecting against a trusted agent, +10*weight for positive gossip from a trusted source, -10*weight for negative gossip from a trusted source, +1*weight for positive gossip from an untrusted source and -1* weight for negative gossip from an untrusted source). Keeps a count of the percepts received about that agent n. If the v/n>5 the agent the beliefs are about is trusted. Will cooperate with trusted agents. Weights for negative percepts are 2, no weight for positive percepts. Spreads positive gossip to trusted agents about trusted agents.",
                    "donor_strategy": "Veritability Discerner",
                    "non_donor_strategy": "Spread Positive Trusted",
                    "trust_model": "Strong Reactor",
                    "options": [5]
                  }
                ]
              }

/community:
  description: A community contains a group of generations which agents belong to.
  post:
    description: Create a new community in the service and get the id back.
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "success": true,
                "status": 200,
                "id": 322
              }
  delete:
    description: Remove a community from the service
    queryParameters:
      community:
        type: integer
        description: The ID of the community to delete
    responses:
       200:
        body:
          application/json:
            example: |
              {
                "success": true,
                "status": 200,
                "data": {
                  "community": 300
                }
              }
       404:
         body:
           application/json:
             example: |
               {
                 "success": false,
                 "status": 404,
                 "message": "No community with this id to retract",
                 "data": {
                   "community": 700
                 }
               }
/generation:
  description: A generation belongs to a community and agents reside in a generation.
  post:
    description: Create a new generation for an existing community in the service. If the return value of success is false, an error message will be returned in the message field of the JSON object.
    body:
      application/json:
        type: |
          {
            "type": "object",
            "required": true,
            "properties": {
              "community": {
                "type": "integer",
                "required": true,
                "description": "The id for the pre-existing community that the generation belongs to"
              },
              "generation": {
              	"type": "integer",
              	"required": true,
              	"description": "The id for the new generation to have"
              }
            }
          }
        example: |
          {
            "community": 322,
            "generation": 7
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "data": {
                  "community": 322,
                  "generation": 7
                },
                "success": true,
                "status": 200
              }

/agent:
  description: The individuals in the system that perceive events, can believe things about their world and act on them. They are part of a generation in a community.
  post:
    description: Create a new agent the belongs to an existing community and generation in the service. If the return value of success is false, an error message will be returned in the message field of the JSON object.
    body:
      application/json:
        type: |
          {
            "type": "object",
            "required": true,
            "properties": {
              "community": {
                "type": "integer",
                "required": true,
                "description": "The id for the pre-existing community that the agent belongs to"
              },
              "generation": {
              	"type": "integer",
              	"required": true,
              	"description": "The id the new agents belongs too"
              },
              "donor_strategy": {
                "type": "string",
                "required": true,
                "description": "The donor strategy for the agent (see strategies)"
              },
              "non_donor_strategy": {
                "type": "string",
                "required": true,
                "description": "The non donor strategy for the agent (see strategies)"
              },
              "trust_model": {
                "type": "string",
                "required": true,
                "description": "The trust model for the agent (see strategies)"
              },
              "options": {
                "type": "array",
                "required": true,
                "description": "The options for the agents strategy (see strategies)"
              },
              "player": {
                "type": "integer",
                "required": true,
                "description": "The id for the new agent"
              }
            }
          }
        example: |
          {
            "community": 322,
            "generation": 7,
            "player": 9,
            "donor_strategy": "Veritability Discerner",
            "non_donor_strategy": "Promote Self",
            "trust_model": "Strong Reactor",
            "options": [5]
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "data": {
                  "community": 322,
                  "generation": 7,
                  "player": 9,
                  "donor_strategy": "Veritability Discerner",
                  "non_donor_strategy": "Promote Self",
                  "trust_model": "Strong Reactor",
                  "options": [5]
                },
                "success": true,
                "status": 200
              }
      404:
        body:
          application/json:
            example: |
              {
                "data": {
                  "community": 322,
                  "generation": 7,
                  "player": 9,
                  "donor_strategy": "V Discerner",
                  "non_donor_strategy": "Promote Self",
                  "trust_model": "Strong Reactor",
                  "options": [5]
                },
                "success": false,
                "message": "No such strategy",
                "status": 404
              }


/percept:
  description: Agents perceive events and happenings in an environment, input percepts to them.
  /action:
    description: A particular type of percept where an action has been taken and the agent has perceived it.
    /interaction:
      description: An interaction between a donor-recipient pair where the donor has committed to an action.
      post:
        body:
          application/json:
            type: |
              {
                "type": "object",
                "required": true,
                "properties": {
                  "community": {
                    "type": "integer",
                    "required": true,
                    "description": "The id for the community the donor, recipent and perceiver belong to"
                  },
                  "generation": {
                    "type": "integer",
                    "required": true,
                    "description": "The id for the generation the donor, recipent and perceiver belong to"
                  },
                  "perceiver": {
                    "type": "integer",
                    "required": true,
                    "description": "The id for the agent to send the perception to"
                  },
                  "donor": {
                    "type": "integer",
                    "required": true,
                    "description": "The id for the agent the committed the action"
                  },
                  "recipient": {
                    "type": "integer",
                    "required": true,
                    "description": "The id of the agent that was on the receiving end of the action"
                  },
                  "action": {
                    "type": "string",
                    "required": true,
                    "description": "Either defect or cooperate, the action the donor committed"
                  },
                  "timepoint": {
                    "type": "integer",
                    "required": true,
                    "description": "The timepoint at which the action was committed to"
                  }
                }
              }
            example: |
              {
                "community": 45,
                "generation": 3,
                "perceiver": 1,
                "action": "defect",
                "donor": 3,
                "recipient": 4,
                "timepoint": 3
              }
        description: Give an agent a percept of an interaction between a donor-recipient pair of agents at a specific timepoint and the action (defect or cooperate) that the donor took.
        responses:
          200:
            body:
              application/json:
                example: |
                  {
                    "data": {
                      "community": 45,
                      "generation": 3,
                      "perceiver": 1,
                      "action": "defect",
                      "donor": 3,
                      "recipient": 4,
                      "timepoint": 3
                    },
                    "success": true,
                    "status": 200
                  }
          404:
            body:
              application/json:
                example: |
                  {
                    "data": {
                      "community": 45,
                      "generation": 3,
                      "perceiver": 1,
                      "action": "incorrect",
                      "donor": 3,
                      "recipient": 4,
                      "timepoint": 3
                    },
                    "success": false,
                    "status": 404,
                    "message": "Incorrect action must either be defect or cooperate"
                  }
    /gossip:
      description: A gossiper has gossiped to the perceiver either a positive or negative statement about an agent.
      post:
        body:
          application/json:
            type: |
              {
                "type": "object",
                "required": true,
                "properties": {
                  "community": {
                    "type": "integer",
                    "required": true,
                    "description": "The id for the community the gossiper, about and perceiver agents belong to"
                  },
                  "generation": {
                    "type": "integer",
                    "required": true,
                    "description": "The id for the generation the gossiper, about and perceiver agents belong to"
                  },
                  "perceiver": {
                    "type": "integer",
                    "required": true,
                    "description": "The id for the agent to send the perception to"
                  },
                  "gossiper": {
                    "type": "integer",
                    "required": true,
                    "description": "The id for the agent that is gossiping"
                  },
                  "about": {
                    "type": "integer",
                    "required": true,
                    "description": "The id of the agent that the gossip is about"
                  },
                  "gossip": {
                    "type": "string",
                    "required": true,
                    "description": "Either positive or negative, the piece of gossip the gossiper committed"
                  },
                  "timepoint": {
                    "type": "integer",
                    "required": true,
                    "description": "The timepoint at which the gossip was transmitted"
                  }
                }
              }
            example: |
              {
                "community": 45,
                "generation": 3,
                "perceiver": 1,
                "gossip": "positive",
                "gossiper": 3,
                "about": 4,
                "timepoint": 3
              }
        description: Give an agent a percept of an agent gossiping to them about another agent at a particular timepoint, the gossip can either be "positive" or "negative".
        responses:
          200:
            body:
              application/json:
                example: |
                  {
                    "data": {
                      "community": 45,
                      "generation": 3,
                      "perceiver": 6,
                      "gossip": "positive",
                      "about": 3,
                      "gossiper": 5,
                      "timepoint": 7
                    },
                    "success": true,
                    "status": 200
                  }
          404:
            body:
              application/json:
                example: |
                  {
                    "data": {
                      "community": 45,
                      "generation": 3,
                      "perceiver": 6,
                      "gossip": "incorrect",
                      "about": 3,
                      "gossiper": 5,
                      "timepoint": 7
                    },
                    "success": false,
                    "status": 404,
                    "message": "Incorrect gossip action should be either positive or negative"
                  }
  /interaction:
    description: A perception for a donor and recipient that they are members of a donor-recipient pair at this specific timepoint.
    post:
      body:
        application/json:
          type: |
            {
              "type": "object",
              "required": true,
              "properties": {
                "community": {
                  "type": "integer",
                  "required": true,
                  "description": "The id for the community the donor, recipent and perceiver belong to"
                },
                "generation": {
                  "type": "integer",
                  "required": true,
                  "description": "The id for the generation the donor, recipent and perceiver belong to"
                },
                "donor": {
                  "type": "integer",
                  "required": true,
                  "description": "The id for the agent the committed the action"
                },
                "recipient": {
                  "type": "integer",
                  "required": true,
                  "description": "The id of the agent that was on the receiving end of the action"
                },
                "timepoint": {
                  "type": "integer",
                  "required": true,
                  "description": "The timepoint at which the action was committed to"
                }
              }
            }
          example: |
            {
              "community": 45,
              "generation": 3,
              "donor": 3,
              "recipient": 4,
              "timepoint": 3
            }
      description: Give a percept to both a donor and a recipient that they are part of a donor-recipient pair at a particular timepoint.
      responses:
          200:
            body:
              application/json:
                example: |
                  {
                    "data": {
                      "community": 45,
                      "generation": 3,
                      "donor": 3,
                      "recipient": 4,
                      "timepoint": 3
                    },
                    "success": true,
                    "status": 200
                  }
          404:
            body:
              application/json:
                example: |
                  {
                    "data": {
                      "community": 45,
                      "generation": -20,
                      "donor": 3,
                      "recipient": 4,
                      "timepoint": 3
                    },
                    "success": false,
                    "status": 404,
                    "message": "No such generation for this community"
                  }

/action:
  description: An action is taken by an agent at a specific timepoint, this can either be idle, gossip or action.
  get:
    queryParameters:
      timepoint:
        type: integer
        description: The timepoint at which the action is decided upon
      community:
        type: integer
        description: The id for the community that the actor belongs to
      generation:
        type: integer
        description: The id for the generation that the actor belongs to
      player:
        type: integer
        description: The id for the actor
    description: Get the action that an agent commits to at a particular timepoint with the beliefs that have been built from perceptions. The action can either be idle, gossip (positive or negative, with about and recipient parameters) or action (cooperate or defect, with recipient parameters)
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "data": {
                  "timepoint": 8,
                  "community": 45,
                  "generation": 3,
                  "player": 3
                },
                "success": true,
                "status": 200,
                "action": {
                  "type": "gossip",
                  "value": "positive",
                  "about": 0,
                  "recipient": 3,
                  "reason": "I trust the recipient"
                }
              }
      404:
        body:
          application/json:
            example: |
              {
                "data": {
                  "timepoint": 8,
                  "community": 45,
                  "generation": -20,
                  "player": 3
                },
                "success": false,
                "status": 404,
                "message": "No such generation for this community"
              }
